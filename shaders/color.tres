[gd_resource type="VisualShader" load_steps=4 format=2]

[sub_resource type="VisualShaderNodeVectorOp" id=1]
operator = 2

[sub_resource type="VisualShaderNodeTexture" id=2]
source = 2

[sub_resource type="VisualShaderNodeColorUniform" id=3]
uniform_name = "FillColor"

[resource]
code = "shader_type canvas_item;
uniform vec4 FillColor : hint_color;



void vertex() {
// Output:0

}

void fragment() {
// ColorUniform:8
	vec3 n_out8p0 = FillColor.rgb;
	float n_out8p1 = FillColor.a;

// Texture:6
	vec3 n_out6p0;
	float n_out6p1;
	{
		vec4 _tex_read = texture(TEXTURE , UV.xy);
		n_out6p0 = _tex_read.rgb;
		n_out6p1 = _tex_read.a;
	}

// VectorOp:4
	vec3 n_out4p0 = n_out8p0 * vec3(n_out6p1);

// Output:0
	COLOR.rgb = n_out4p0;
	COLOR.a = n_out6p1;

}

void light() {
// Output:0

}
"
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 340, 220 )
nodes/fragment/4/node = SubResource( 1 )
nodes/fragment/4/position = Vector2( 120, 140 )
nodes/fragment/6/node = SubResource( 2 )
nodes/fragment/6/position = Vector2( -160, 280 )
nodes/fragment/8/node = SubResource( 3 )
nodes/fragment/8/position = Vector2( -160, 140 )
nodes/fragment/connections = PoolIntArray( 6, 1, 0, 1, 6, 1, 4, 1, 8, 0, 4, 0, 4, 0, 0, 0 )
